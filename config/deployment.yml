# Deployment Configuration for GoodBooks Recommender
# This file contains environment-specific deployment configurations

# Global Configuration
global:
  registry: ghcr.io/owner/goodbooks-recommender
  namespace: goodbooks
  image_pull_policy: Always
  
# Environment Configurations
environments:
  development:
    base_url: https://dev.goodbooks.company.com
    replicas: 2
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 512Mi
    database:
      instance_class: db.t3.micro
      storage: 20
    redis:
      node_type: cache.t3.micro
      cluster_size: 1
    monitoring:
      enabled: true
      retention: 7d
    
  staging:
    base_url: https://staging.goodbooks.company.com
    replicas: 3
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 1000m
        memory: 1Gi
    database:
      instance_class: db.t3.small
      storage: 50
    redis:
      node_type: cache.t3.small
      cluster_size: 2
    monitoring:
      enabled: true
      retention: 14d
      
  production:
    base_url: https://goodbooks.company.com
    replicas: 5
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        cpu: 2000m
        memory: 2Gi
    database:
      instance_class: db.t3.medium
      storage: 100
    redis:
      node_type: cache.t3.medium
      cluster_size: 3
    monitoring:
      enabled: true
      retention: 30d

# Deployment Strategy Configuration
deployment_strategies:
  blue_green:
    health_check_interval: 30s
    health_check_timeout: 10s
    health_check_retries: 3
    smoke_test_timeout: 300s
    monitoring_duration: 300s
    rollback_threshold:
      error_rate: 0.01
      response_time_p95: 2.0
      
  canary:
    initial_traffic: 10
    traffic_increments: [10, 25, 50, 100]
    monitoring_duration: 120s
    success_threshold:
      error_rate: 0.005
      response_time_p95: 1.5
    rollback_threshold:
      error_rate: 0.02
      response_time_p95: 3.0
      
  rolling:
    max_unavailable: 25%
    max_surge: 25%
    progress_deadline: 600s
    revision_history_limit: 10

# Security Configuration
security:
  pod_security_context:
    run_as_non_root: true
    run_as_user: 1001
    run_as_group: 1001
    fs_group: 1001
    
  container_security_context:
    allow_privilege_escalation: false
    read_only_root_filesystem: true
    drop_capabilities:
      - ALL
    add_capabilities:
      - NET_BIND_SERVICE
      
  network_policies:
    enabled: true
    ingress_rules:
      - from:
        - namespace_selector:
            match_labels:
              name: ingress-nginx
        ports:
        - protocol: TCP
          port: 8000
      - from:
        - namespace_selector:
            match_labels:
              name: monitoring
        ports:
        - protocol: TCP
          port: 9090
          
  pod_disruption_budget:
    enabled: true
    min_available: 50%

# Monitoring Configuration
monitoring:
  prometheus_url: http://prometheus.monitoring.svc.cluster.local:9090
  grafana_url: http://grafana.monitoring.svc.cluster.local:3000
  alertmanager_url: http://alertmanager.monitoring.svc.cluster.local:9093
  
  metrics:
    - name: http_requests_total
      help: Total HTTP requests
      type: counter
      labels: [method, status, endpoint]
      
    - name: http_request_duration_seconds
      help: HTTP request duration
      type: histogram
      labels: [method, endpoint]
      buckets: [0.1, 0.5, 1.0, 2.0, 5.0]
      
    - name: database_connection_pool_size
      help: Database connection pool size
      type: gauge
      
    - name: redis_cache_hit_rate
      help: Redis cache hit rate
      type: gauge
      
  health_checks:
    liveness_probe:
      http_get:
        path: /health
        port: 8000
      initial_delay_seconds: 30
      period_seconds: 10
      timeout_seconds: 5
      failure_threshold: 3
      
    readiness_probe:
      http_get:
        path: /ready
        port: 8000
      initial_delay_seconds: 5
      period_seconds: 5
      timeout_seconds: 3
      failure_threshold: 3

# Autoscaling Configuration
autoscaling:
  horizontal_pod_autoscaler:
    enabled: true
    min_replicas: 2
    max_replicas: 10
    target_cpu_utilization: 70
    target_memory_utilization: 80
    scale_up_stabilization: 60s
    scale_down_stabilization: 300s
    
  vertical_pod_autoscaler:
    enabled: false
    update_mode: "Auto"
    resource_policy:
      container_policies:
        - container_name: goodbooks
          max_allowed:
            cpu: 2
            memory: 4Gi
          min_allowed:
            cpu: 100m
            memory: 256Mi

# Backup Configuration
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention_days: 30
  storage_class: standard
  
  databases:
    postgresql:
      enabled: true
      backup_method: pg_dump
      compression: gzip
      
  persistent_volumes:
    enabled: true
    snapshot_class: csi-hostpath-snapshotter
    
# Disaster Recovery
disaster_recovery:
  rpo_target: 4h  # Recovery Point Objective
  rto_target: 1h  # Recovery Time Objective
  
  backup_regions:
    - us-west-2
    - us-east-1
    
  failover:
    automatic: false
    manual_approval_required: true
    health_check_endpoint: /health
    
# Compliance Configuration
compliance:
  data_retention:
    logs: 90d
    metrics: 30d
    audit_trails: 7y
    user_data: per_privacy_policy
    
  encryption:
    at_rest: AES-256
    in_transit: TLS-1.3
    key_rotation: 90d
    
  access_controls:
    rbac_enabled: true
    pod_security_standards: restricted
    network_policies_required: true
    
# Feature Flags
feature_flags:
  blue_green_deployment: true
  canary_deployment: true
  rolling_deployment: true
  auto_scaling: true
  monitoring: true
  backup: true
  disaster_recovery: false  # Enable only for production
  compliance_mode: true

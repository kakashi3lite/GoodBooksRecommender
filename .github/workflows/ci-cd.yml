name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Test Suite with Coverage
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run linting
      run: |
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run type checking
      run: |
        python -m mypy src --ignore-missing-imports --strict-optional
    
    - name: Run tests with coverage
      run: |
        pytest --cov=src --cov-report=xml --cov-report=term --cov-fail-under=90
      env:
        REDIS_HOST: localhost
        REDIS_PORT: 6379
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
    
    - name: Generate coverage badge
      run: |
        coverage-badge -o coverage.svg
    
    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          htmlcov/
          coverage.xml
          .coverage

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run safety check
      run: |
        safety check --file requirements.txt
    
    - name: Run bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json
    
    - name: Upload security results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-results
        path: bandit-report.json

  build:
    name: Build and Test Docker Image
    needs: [test, security]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: goodbooks-recommender:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm goodbooks-recommender:test python -c "import src; print('Import successful')"

  performance:
    name: Performance Tests
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark
    
    - name: Run performance tests
      run: |
        pytest tests/test_tfidf_edge_cases.py::TestTFIDFPerformance -v --benchmark-only
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: .benchmarks/

  quality-gate:
    name: Quality Gate
    needs: [test, security, build]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "Tests failed or were cancelled"
          exit 1
        fi
    
    - name: Check security results
      run: |
        if [[ "${{ needs.security.result }}" != "success" ]]; then
          echo "Security scan failed or was cancelled"
          exit 1
        fi
    
    - name: Check build results
      run: |
        if [[ "${{ needs.build.result }}" != "success" ]]; then
          echo "Build failed or was cancelled"
          exit 1
        fi
    
    - name: Quality gate passed
      run: |
        echo "‚úÖ All quality checks passed!"
        echo "üìä Coverage: ‚â•90%"
        echo "üîí Security: Passed"
        echo "üèóÔ∏è Build: Successful"
